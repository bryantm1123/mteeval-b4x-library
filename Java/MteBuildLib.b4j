Version=4.2
AppType=StandardJava
NumberOfModules=5
Module1=Codeblock
Module2=Codegen
Module3=Mtelog
Module4=PCODE
Module5=Run
Build1=Default,b4j.example
NumberOfFiles=0
NumberOfLibraries=2
Library1=jcore
Library2=javaobject
@EndOfDesignText@
'Non-UI application (console / server application)
#Region  Project Attributes 
	#CommandLineArgs:
	#MergeLibraries: True 
	
	#LibraryVersion: 1.01
	#LibraryName: MteEval
	#LibraryAuthor: MacThomas Engineering

#End Region

Sub Process_Globals
	
End Sub

Sub AppStart (Args() As String)
	
	RunTests
	
End Sub


'*--------------------------------------------------------------------------
'*
'* RunTests - Run test cases
'*
'*
Private Sub RunTests


	DoTest( 1, "Add and Subtract", "{||5+6-3}",  Array () )
	DoTest( 2, "Divide By Zero", "{||5+6/0}",  Array () )
	DoTest( 3, "Cirumference of circle, radius=5", "{|r|2*CPi*r}",  Array (5) )
	DoTest( 4, "Area of circle, radius=5", "{|r|CPi*(r*r)}",  Array (5) )
	DoTest( 5, "Missing parenthesis", "{||35*3+6)}",  Array (5) )
	DoTest( 6, "Min with iif()", "{|a,b| iif( a > b, b, a) }",  Array (5,10) )
	DoTest( 7, "Find length of diagonal", "{|a,b| sqrt(a*a+b*b)}",  Array (7,9) )
	DoTest( 8, "Report e", "{|| ce }", Array() )
	DoTest( 9, "Kitchen Sink", "{|a,b,c,d,e,f|-abs(iif(a+c*f <= e/d*a, iif( min(a,d) >= max(c,e), b*b, c*c ), iif( 5 == c || 5 == e || 77 > 22 && !(10 < 3), Sqrt(c), Sqrt(d))))}", Array ( 34, 43, 17, 25,45, 13) ) 

	Mtelog.Stop	
	
 End Sub
 
 '*--------------------------------------------------------------------------
'*
'* DoTest - Compile and run test case
'*
'*
 Private Sub DoTest ( nTestNumber As Int, sDescription As String, sCodeblockText As String, aArgs() As Object )
	Private cb As Codeblock
	Private nResult As Double


	Log( "*********************************")
	Log( nTestNumber & " - " & sDescription )
	Log( "Codeblock=" & sCodeblockText	)
		
	cb.Initialize
	cb.Compile( sCodeblockText )	
	If ( cb.Error <> cb.ERROR_NONE ) Then 
		Log( "Compile error=" & cb.Error )
		Log( "Error Description: " & cb.ErrorDesc)
		Log( "Error Detail: " & cb.ErrorDetail )
		Return		
	End If
	Log( "Codeblock compiled.")

	If ( aArgs.Length = 0 ) Then 
		nResult = cb.Eval
	Else 
		nResult = cb.Eval2( aArgs )	
	End If

	Log( "Codeblock executed.")
	Log( "Result=" & nResult ) 
	
	If ( cb.Error <> cb.ERROR_NONE ) Then 
		Log( "Eval error=" & cb.Error )
		Log( "Error Description: " & cb.ErrorDesc)
		Log( "Error Detail: " & cb.ErrorDetail )
	End If
    
	'Uncomment To Decompile
	Private CodeListing As List 
	CodeListing = cb.Decompile
	Log( "------------------------")
	For Each sLine As String In CodeListing
		Log( sLine )
	Next
	Log( "------------------------")

	Return 

End Sub 
